UniversalFields:
  Comment: 
    Type: string
  End:
    Type: bool
    OutputOnly: true
  Type:
    Type: StateType
    OutputOnly: true
    OutputValue: "self.StateType()"
  name:
    Type: string
    SkipSetter: true
    SkipOutput: true

SharedFields:
  Resource:
    Type: string
  Next:
    Type: State
    OutputType: string
    OutputValue: "\"\""

  ChainableNext:
    Alias: "self.Next(input)"
    Type: State
    NonBuilderSetter: true
    SkipOutput: true
  Parameters:
    Type: map[string]interface{}

  Catch:
    Type: "*CatchClause"
    Array: true

  Timeout:
    Type: time.Duration
    OutputType: Timeout
    JSONName: "TimeoutSeconds"
    Comment: |-
      // Timeout is the number of seconds for the task to complete.  If this
      // time elapses without a check-in then the task is considered failed.
      //
      // Any time less than one second will induce a panic.
  TableName:
    SkipOutput: true
    Alias: 'self.SetParameter("TableName", input)'
    Comment: |-
      // TableName sets the name of the table to make the dynamodb request to.

  FunctionName:
    SkipOutput: true
    Alias: 'self.SetParameter("FunctionName", input)'
    Comment: |-
      // FunctionName sets the ARN/Name/or other indicator of the Lambda
      // Function to invoke. See AWS documentation for more details:
      // https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestParameters

  Key:
    SkipOutput: true
    Alias: 'self.SetParameter("Key", input)'
    #Type: map[string]*github.com/aws/aws-sdk-go/service/dynamodb.AttributeValue
    #Type: "github.com/aws/aws-sdk-go/service/dynamodb.AttributeValue"

  Heartbeat:
    Comment: |-
      // Heartbeat is the number of seconds required between check-ins.
      // If this time elapses without a check-in then the task is considered
      // failed.
      //
      // Any time less than one second will induce a panic.
    Type: time.Duration
    OutputType: Timeout
    JSONName: HeartbeatSeconds

StateTypes:
  Task: 
    Comment: |-
      // Task is a state that does something. There are specific
      // helper definitions for most common sub-types of a task, such as
      // getting/putting/deleting from dynamodb or invoking a lambda and
      // waiting for a callback.
      // 
      // See https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-task-state.html 
      // for more details.
    StateType: "Task"
    IncludeFields:
      - Resource
      - Next
      - ChainableNext
      - Heartbeat
      - Timeout
      - Catch
      - Parameters

  DynamoGet:
    Comment: |-
      // DynamoGet is a wrapper for the DynamoDB getItem integration.
      //
      // AWS Documentation https://docs.aws.amazon.com/step-functions/latest/dg/connect-ddb.html
    StateType: "Task"
    IncludeFields:
      - Next
      - ChainableNext
      - Heartbeat
      - Timeout
      - Catch
      - Parameters
      - TableName
      - Key
    Fields:
      Resource:
        OutputOnly: true
        Type: string
        OutputValue: '"arn:aws:states:::dynamodb:getItem"'

  DynamoDelete:
    Comment: |-
      // DynamoDelete is a wrapper for the DynamoDB deleteItem integration.
      //
      // AWS Documentation https://docs.aws.amazon.com/step-functions/latest/dg/connect-ddb.html
    StateType: "Task"
    IncludeFields:
      - Resource
      - Next
      - ChainableNext
      - Heartbeat
      - Timeout
      - Catch
      - Parameters
      - TableName
      - Key
    Fields:
      Resource:
        OutputOnly: true
        Type: string
        OutputValue: '"arn:aws:states:::dynamodb:deleteItem"'

  DynamoPut:
    Comment: |-
      // DynamoPut is a wrapper for the DynamoDB putItem integration.
      //
      // AWS Documentation https://docs.aws.amazon.com/step-functions/latest/dg/connect-ddb.html
    StateType: "Task"
    IncludeFields:
      - Resource
      - Next
      - ChainableNext
      - Heartbeat
      - Timeout
      - Catch
      - Parameters
      - Key
    Fields:
      Resource:
        OutputOnly: true
        Type: string
        OutputValue: '"arn:aws:states:::dynamodb:putItem"'

  LambdaWait:
    StateType: "Task"
    IncludeFields:
      - Catch
      - ChainableNext
      - FunctionName
      - Heartbeat
      - Next
      - Parameters
      - Resource
      - Timeout
  
  Pass:
    StateType: "Pass"
    IncludeFields:
      - Next
      - ChainableNext

  Succeed:
    StateType: "Succeed"

  Fail:
    StateType: "Fail"

